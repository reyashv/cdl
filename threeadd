class TreeNode:
    def __init__(self, value):
        self.value = value
        self.children = []

    def add_child(self, child):
        self.children.append(child)

    def __str__(self):
        return str(self.value)
    
class ThreeAddressCodeGenerator:
    def __init__(self):
        self.code = []
        self.temp_count = 0
        self.root = None

    def generate_temp(self):
        temp = f"t{self.temp_count}"
        self.temp_count += 1
        return temp

    def generate_code(self, expression):
        lines=[]
        stack = []
        tokens = expression.split()
        for token in tokens:
            if token.isalnum():  
                stack.append(token)
            else: 
                op2 = stack.pop()
                op1 = stack.pop()
                temp = self.generate_temp()
                self.code.append((token, op1, op2, temp))
                stack.append(temp)
        for line in self.code:
            lines.append(line)
        return lines
            
    def generate_parse_tree(self, code):
        self.root = self._construct_tree(code)

    def _construct_tree(self, code):
        stack = []
        for op, op1, op2, temp in code:
            node = TreeNode((op, temp))
            if op1.isdigit() or op1.isalpha():
                node.add_child(TreeNode(op1))
            else:
                node.add_child(stack.pop())

            if op2.isdigit() or op2.isalpha():
                node.add_child(TreeNode(op2))
            else:
                node.add_child(stack.pop())
            stack.append(node)
        return stack.pop()

    def print_tree(self, node, level=0):
        if node:
            print("  " * level + str(node))
            for child in node.children:
                self.print_tree(child, level + 1)
            
def infix_to_postfix(expression):
    precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
    output = []
    operator_stack = []
    for token in expression.split():
        if token.isdigit():
            output.append(token)
        elif token == '(':
            operator_stack.append(token)
        elif token == ')':
            while operator_stack and operator_stack[-1] != '(':
                output.append(operator_stack.pop())
            operator_stack.pop()  
        else: 
            while operator_stack and precedence.get(token, 0) <= precedence.get(operator_stack[-1], 0):
                output.append(operator_stack.pop())
            operator_stack.append(token)
    while operator_stack:
        output.append(operator_stack.pop())
    return ' '.join(output)

infix_expression = "3 + 4 * ( 2 - 1 )"
postfix_expression = infix_to_postfix(infix_expression)
print(postfix_expression)
generator = ThreeAddressCodeGenerator()
lines=generator.generate_code(postfix_expression)
generator.generate_parse_tree(lines)
generator.print_tree(generator.root)
