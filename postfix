class TreeNode:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

def construct_parse_tree(postfix_expression):
    stack = []
    tokens=postfix_expression.split(" ")
    for token in tokens:
        if token not in ['+', '-', '*', '/']:
            stack.append(TreeNode(token))
        else:
            right_node = stack.pop()
            left_node = stack.pop()
            operator_node = TreeNode(token)
            operator_node.left = left_node
            operator_node.right = right_node
            stack.append(operator_node)
    return stack[0]

def print_parse_tree(node, level=0, position="Root"):
    if node is not None:
        root_indicator = " (Root)" if position == "Root" else ""
        print('  ' * level + position + root_indicator + ": " + str(node.value))
        print_parse_tree(node.left, level + 1, "Left")
        print_parse_tree(node.right, level + 1, "Right")

def infix_to_postfix(expression):
    precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
    output = []
    stack = []
    tokens=expression.split()
    for token in tokens:
        if token.isdigit():
            output.append(token)
        elif token == '(':
            stack.append(token)
        elif token == ')':
            while stack and stack[-1] != '(':
                output.append(stack.pop())
            stack.pop()  
        else: 
            while stack and precedence.get(token, 0) <= precedence.get(stack[-1], 0):
                output.append(stack.pop())
            stack.append(token)
    while stack:
        output.append(stack.pop())
    return ' '.join(output)

infix_expression = "1 + 2 * 3 - 4"
postfix_expression = infix_to_postfix(infix_expression)
parse_tree = construct_parse_tree(postfix_expression)
print("Parse tree:")
print_parse_tree(parse_tree)
