import networkx as nx
from networkx import shortest_path_length

precedence_table = []
with open("table.txt", 'r') as file:
    for line in file:
        tokens = line.strip().split()
        precedence_table.append(tokens)
print(precedence_table)
def check_string(precedence_table):
    symbols = list('(/*%+-)')
    string_to_check = list(input("Enter the string to be checked: "))
    string_to_check.append("$")
    stack = [None] * len(string_to_check)
    stack_index = 0
    stack.insert(stack_index, "$")
    row_labels = [row[0] for row in precedence_table]
    column_labels = list(precedence_table[0])
    string_index = 0
    while stack[0] != stack[1]:
        if string_to_check[len(string_to_check) - 2] in symbols:
            break
        elif (stack[stack_index] in row_labels) and (string_to_check[string_index] in column_labels):
            if precedence_table[row_labels.index(stack[stack_index])][column_labels.index(string_to_check[string_index])] == "<":
                stack_index += 1
                stack.insert(stack_index, string_to_check[string_index])
                string_index += 1
            elif precedence_table[row_labels.index(stack[stack_index])][column_labels.index(string_to_check[string_index])] == ">":
                stack.pop(stack_index)
                stack_index -= 1
            elif (precedence_table[row_labels.index(stack[stack_index])][column_labels.index(string_to_check[string_index])] == '.') and ((stack[stack_index] == "$") and (string_to_check[string_index] == "$")):
                stack[1] = stack[0]
        else:
            break
           
    if stack[0] != stack[1]:
        return False
    else:
        return True
   
if check_string(precedence_table):
    print("String is accepted")
else:
    print("String is not accepted")

def create_edges(precedence_table):
    edges = []

    for i in range(1, len(precedence_table)):
        for j in range(1, len(precedence_table[i])):
            if precedence_table[i][j] == '<':
                source = f'f{precedence_table[i][0]}'
                destination = f'g{precedence_table[0][j]}'
                edges.append((source, destination))
            elif precedence_table[i][j] == '>':
                source = f'g{precedence_table[0][j]}'
                destination = f'f{precedence_table[i][0]}'
                edges.append((source, destination))

    return edges

edges = create_edges(precedence_table)
for edge in edges:
    print(f'Edge: {edge[0]} -> {edge[1]}')

print(edges)

G = nx.DiGraph()
G.add_edges_from(edges)

f_nodes = [node for node in G.nodes if node.startswith('f')]
g_nodes = [node for node in G.nodes if node.startswith('g')]

max_lengths_f = {}
max_lengths_g = {}

for node in f_nodes:
    max_lengths_f[node] = max(shortest_path_length(G, node).values())

for node in g_nodes:
    max_lengths_g[node] = max(shortest_path_length(G, node).values())

print("Maximum path lengths from 'f' nodes:")
for node, length in max_lengths_f.items():
    print(f"{node}: {length}")

print("\nMaximum path lengths from 'g' nodes:")
for node, length in max_lengths_g.items():
    print(f"{node}: {length}")
