def infix_to_postfix(expression):
    precedence = {'NOT': 3, 'AND': 2, 'OR': 1}
    associativity = {'NOT': 'right', 'AND': 'left', 'OR': 'left'}
    output = []
    operator_stack = []
    tokens = expression.split()
    for token in tokens:
        if token not in ['NOT','AND','OR']: 
            output.append(token)
        else:
            while (operator_stack and
                   precedence.get(token, 0) <= precedence.get(operator_stack[-1], 0) and
                   (associativity[token] == 'left' or precedence[token] < precedence[operator_stack[-1]])):
                output.append(operator_stack.pop())
            operator_stack.append(token)
    while operator_stack:
        output.append(operator_stack.pop())
    return ' '.join(output)
    
class ThreeAddressCodeGenerator:
    def __init__(self):
        self.code = []
        self.temp_count = 0
        self.root = None

    def generate_temp(self):
        temp = f"t{self.temp_count}"
        self.temp_count += 1
        return temp

    def generate_code(self, expression):
        stack = []
        lines=[]
        tokens = expression.split()
        for token in tokens:
            if token == 'NOT':  
                op = stack.pop()
                temp = self.generate_temp()
                self.code.append(('NOT', op, temp))
                stack.append(temp)
            elif token in ['AND', 'OR']:  
                op2 = stack.pop()
                op1 = stack.pop()
                temp = self.generate_temp()
                self.code.append((token, op1, op2, temp))
                stack.append(temp)
            else:  
                stack.append(token)
        for line in self.code:
            print(line)

expression = "NOT b OR c AND d"
postfix_expression = infix_to_postfix(expression)
generator = ThreeAddressCodeGenerator()
generator.generate_code(postfix_expression)
